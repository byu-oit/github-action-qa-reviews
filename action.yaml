name: 'QATE Reviews Notification'
description: 'Notify the QATE on a team that a pull request is ready for testing'
inputs:
  MS_TEAMS_WEBHOOK_URL: 
    description: 'The URL for incoming webhooks on Microsoft Teams'
runs:
  using: 'composite'
  steps:
    - name: Setup ENV Variables
      id: setup-env
      run: |
        import json
        import re
        import os
        with open('') as fh:
            event = json.load(fh)
        print (f'Review.Body:\n{event["review"]["body"]}')
        # if the event.review.body is not null
        # filter out any quote-reply content, i.e. lines that start with ">"
        if event['review']['body'] is not None:
          newComments = re.sub("^>.*$", "", event['review']['body'], 0, re.M)
          qaMention = 1 if "QA_TEST" in newComments else 0
          # JSON-escaped, but strip the start and end quote marks that json.dumps includes
          escapedTitle = json.dumps(event['pull_request']['title'])[1:-1]
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              print(f'PR_TITLE={escapedTitle}', file=fh)
              print(f'qa_mention={qaMention}', file=fh)
        else:
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              print(f'qa_mention={0}', file=fh)
      shell: python

    - name: Cancel if no QA Mention
      if: env.qa_mention != 1
      uses: andymckay/cancel-action@0.2

    - name: Microsoft Teams Notification
      uses: skitionek/notify-microsoft-teams@master
      if: env.qa_mention == 1
      with:
        webhook_url: ${{ inputs.MS_TEAMS_WEBHOOK_URL }}
        raw: >-
          {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "${{ env.PR_TITLE }} is ready for testing",
              "sections": [{
                  "activityTitle": "${{ env.PR_TITLE }} is ready for testing",
                  "facts": [{
                    "name": "Pull Request Opened By",
                    "value": "${{github.event.pull_request.user.login}}"
                  },{
                    "name": "Repository",
                    "value": "${{github.event.pull_request.head.repo.full_name}}"
                  },{
                    "name": "Branch",
                    "value": "${{github.event.pull_request.head.ref}}"
                  }],
                  "markdown": true
              }],
              "potentialAction": [{
                  "@type": "OpenUri",
                  "name": "Go to Pull Request",
                  "targets": [{
                    "os": "default",
                    "uri": "${{ github.event.pull_request.html_url }}"
                  }]
              }]
          }
          

  
